<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java-Concurrent Introduction on Java-Concurrent</title>
    <link>https://hello-world-example.github.io/Java-Concurrent/</link>
    <description>Recent content in Java-Concurrent Introduction on Java-Concurrent</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://hello-world-example.github.io/Java-Concurrent/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Java-Concurrent/_sidebar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Java-Concurrent/_sidebar/</guid>
      <description> java.lang  Thread ThreadLocal  sun.misc  Unsafe  java.util.concurrent.locks  LockSupport AbstractQueuedSynchronizer ReentrantLock [8]StampedLock  java.util.concurrent  ExecutorService♨ Future➿ ExecutorCompletionService➿ [7]ForkJoin♨ [8]CompletableFuture➿ CountDownLatch 🔒 Semaphore🔒 CyclicBarrier🔒 [7] Phaser🔒 BlockingQueue📏 ArrayBlockingQueue📏 LinkedBlockingQueue📏 PriorityBlockingQueue📏 SynchronousQueue📏 Exchanger📏  java.util.concurrent.atomic  AtomicLong [8]LongAdder   </description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Java-Concurrent/docs/java.lang/Thread/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Java-Concurrent/docs/java.lang/Thread/</guid>
      <description>Thread 线程状态  @see java.lang.Thread.State
  NEW 至今尚未启动的线程处于这种状态，new Thread RUNNABLE 正在 Java 虚拟机中执行的线程处于这种状态，new Thread().start() BLOCKED 受阻塞并等待某个监视器锁的线程处于这种状态，synchronized(lock){} WAITING 无限期地等待另一个线程来执行某一特定操作的线程处于这种状态，synchronized(lock){ lock.wait() } TIMED_WAITING 等待另一个线程来执行取决于指定等待时间的操作的线程处于这种状态，，synchronized(lock){ lock.wait(timeout) } 、Thread.sleep(timeout) TERMINATED 线程执行结束  Methods 简介 thread.join() 等待线程执行完毕，再向下执行，与主线程的关系变成 串行执行。
final Thread thread = new Thread(() -&amp;gt; System.out.println(System.currentTimeMillis())); thread.start(); // 等待 thread 线程执行完毕， 再执行下面的代码 thread.join(); System.out.println(&amp;#34;Main 方法结束&amp;#34;); Thread.yield() 使 当前 线程从执行状态 变为 就绪状态，CPU 重新从众多 就绪状态 的线程里选择，包括当前线程。
 优先级高的不是一定被执行 当前线程不是已经不被执行 所有 就绪状态的线程，都有可能被执行 情况取决于 CPU 的选择，结果是随机的  thread.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Java-Concurrent/docs/java.lang/ThreadLocal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Java-Concurrent/docs/java.lang/ThreadLocal/</guid>
      <description>ThreadLoad 简介  ThreadLocal 实例通常是类中的 private static final 字段 数据 每个线程维护一份，通过隔离、避免竞争 线程池中每个线程是共享的，使用完需要清除，否则下次的线程使用者会使用到上次使用者设置的数据 个人感觉 数据是由 Thread 自己维护的，ThreadLocal 只是给我们提供了操作 Thread 内部变量的工具  ThreadLocal 代码片段 ThreadLocalMap getMap(Thread t) { return t.threadLocals; } // key: ThreadLocal ; vlaue: 是存储的数据 void createMap(Thread t, T firstValue) { t.threadLocals = new ThreadLocalMap(this, firstValue); } public T get() { // native 方法，返回当前线程对象  Thread t = Thread.currentThread(); // 获取线程（Thread）的 threadLocals 变量，类型是 ThreadLocal.ThreadLocalMap  ThreadLocalMap map = getMap(t); // 刚创建出来的 线程（Thread）维护的 threadLocals 变量是 null  if (map !</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Java-Concurrent/docs/java.util.concurrent/ArrayBlockingQueue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Java-Concurrent/docs/java.util.concurrent/ArrayBlockingQueue/</guid>
      <description>ArrayBlockingQueue  @see BlockingQueue
  ArrayBlockingQueue 是 BlockingQueue 的一个基于数组的实现 基于 ReentrantLock 的 await 和 signal 通知机制 实现阻塞 操作队列数据的时候 并不像 ArrayList 一样，需要扩容 或 数据平移带来的性能损耗 仅仅依靠平移 takeIndex / putIndex 读写坐标  实现原理 ArrayBlockingQueue 构造 // 队列元素 final Object[] items; // 读取坐标 int takeIndex; // 写入坐标 int putIndex; // 当前数据个数 int count; public ArrayBlockingQueue(int capacity, boolean fair) { if (capacity &amp;lt;= 0) throw new IllegalArgumentException(); this.items = new Object[capacity]; // 基于 Lock 的 await 和 signal 通知机制  lock = new ReentrantLock(fair); // 实例化了两个 Condition 队列，用于区分 获取 和 添加  // 唤醒的时候可以唤醒 指定类型的操作  notEmpty = lock.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Java-Concurrent/docs/java.util.concurrent/atomic/AtomicLong/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Java-Concurrent/docs/java.util.concurrent/atomic/AtomicLong/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Java-Concurrent/docs/java.util.concurrent/atomic/LongAdder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Java-Concurrent/docs/java.util.concurrent/atomic/LongAdder/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Java-Concurrent/docs/java.util.concurrent/BlockingQueue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Java-Concurrent/docs/java.util.concurrent/BlockingQueue/</guid>
      <description> BlockingQueue BlockingQueue 不接受 null ，试图 add、put 或 offer 一个 null 元素时，会抛出 NullPointerException，null 被用作指示 poll 操作失败的警戒值。
BlockingQueue 四种形的操作
 在操作可以成功前，无限期地阻塞当前线程 抛出一个异常 返回一个特殊值（null 或 false，具体取决于操作） 阻塞指定的时间      阻塞 抛出异常 特殊值 超时     插入 put add(e) IllegalArgumentException offer(e) offer(e,time,unit)   移除 take remove NoSuchElementException poll() poll(time, unit)   检查
获取但不移除 - element NoSuchElementException peek -    阻塞队列的实现  ArrayBlockingQueue 基于数组的 阻塞队列 LinkedBlockingQueue 基于链表的 阻塞对联 SynchronousQueue 没有长度 的阻塞队列 DelayQueue 延时队列 PriorityBlockingQueue 有权重的 阻塞队列  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Java-Concurrent/docs/java.util.concurrent/CompletableFuture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Java-Concurrent/docs/java.util.concurrent/CompletableFuture/</guid>
      <description>CompletableFuture Java8 带来了 CompletableFuture，一个 Future 的扩展类，极大丰富了 Future 的功能，帮助我们简化异步编程的复杂性，并且提供了函数式编程的能力。
构造方式 API    常用方法 描述     supplyAsync(Supplier&amp;lt;U&amp;gt;) 有返回值的任务。
多核下默认使用 ForkJoinPool线程池，也可以自行构造   runAsync(Runnable) 无返回值的任务。
多核下默认使用 ForkJoinPool线程池，也可以自行构造       allOf(CompletableFuture&amp;lt;?&amp;gt;...) 所有 CompletableFuture 完成代表完成   anyOf(CompletableFuture&amp;lt;?&amp;gt;...) 任意一个 CompletableFuture 完成代表完成       completedFuture(U value) 直接获取 完成状态 的 CompletableFuture    任务关系 API 概述  thenAccept ： 任务执行完的 回调函数，参数是任务的执行结果  thenAcceptBoth： 两个任务同时执行完的 回调函数，thenAccept 是单个任务 acceptEither： 第一个 或 第二个 任务执行完的 回调函数  thenRun：任务执行完的 回调函数，接收 Runnable，无法获取返返回结果 thenApply： 对上一个任务的结果进行的中间计算，返回值传往下传递  applyToEither：第一个 或 第二个 任务执行完的 回调函数，返回值传往下传递  thenCompose： 与 thenApply 作用类似，不过返回值被 CompletableFuture 包装 thenCombine： 与 thenAcceptBoth 类似，不过有有返回值  thenAccept(Consumer) / thenRun(Runnable) final CompletableFuture&amp;lt;Integer&amp;gt; completableFuture = CompletableFuture.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Java-Concurrent/docs/java.util.concurrent/CountDownLatch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Java-Concurrent/docs/java.util.concurrent/CountDownLatch/</guid>
      <description>CountDownLatch CountDownLatch 基于 AQS 同步框架，允许一个或多个线程 await 等待，直到指定数量(count) 的操作完成(countDown)
初始 CountDownLatch 时，会给定 count，调用 await 方法时会阻塞当前线程，直到 count 减小到 0，countDown 会使 count 减 1，该同步器不能被重置。
如何使用 主线程 等待 子线程 int count = 3; CountDownLatch countDownLatch = new CountDownLatch(count); for (int i = 0; i &amp;lt; 3; i++) { int finalI = i; new Thread(() -&amp;gt; { ThreadUtil.sleep(finalI, TimeUnit.SECONDS); Tool.println(Thread.currentThread().getName() + &amp;#34; 完成&amp;#34;); // count - 1  countDownLatch.countDown(); }).start(); } Tool.println(&amp;#34;等待 &amp;#34; + count + &amp;#34;个 任务完成&amp;#34;); // 阻塞当前线程 countDownLatch.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Java-Concurrent/docs/java.util.concurrent/CyclicBarrier/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Java-Concurrent/docs/java.util.concurrent/CyclicBarrier/</guid>
      <description>CyclicBarrier 如何使用 CyclicBarrier cyclicBarrier = new CyclicBarrier(3); // 随机休息一段时间 Runnable work = () -&amp;gt; { final int sleep = Math.abs(new Random().nextInt() % 10); Tool.println(&amp;#34;sleep &amp;#34; + sleep); ThreadUtil.sleep(sleep, TimeUnit.SECONDS); }; // 调用 barrier.await() Consumer&amp;lt;CyclicBarrier&amp;gt; await = (CyclicBarrier barrier) -&amp;gt; { try { barrier.await(); } catch (Exception e) { e.printStackTrace(); } }; final Runnable runnable = () -&amp;gt; { work.run(); await.accept(cyclicBarrier); // 等待所有线程准备好  Tool.println(&amp;#34;A &amp;#34;); work.run(); await.accept(cyclicBarrier); // 等待所有线程准备好  Tool.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Java-Concurrent/docs/java.util.concurrent/Exchanger/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Java-Concurrent/docs/java.util.concurrent/Exchanger/</guid>
      <description>Exchanger Exchanger 跟 SynchronousQueue 有点类似，都有点类似于线程间通讯
 Exchanger 在发送的时候同时能够接收 SynchronousQueue 一个发送一个接收，创建两个 SynchronousQueue 来传递数据好像同样可以达到 Exchanger 的效果  如何使用 Exchanger&amp;lt;Integer&amp;gt; exchanger = new Exchanger&amp;lt;&amp;gt;(); Runnable runnable = () -&amp;gt; { for (; ; ) { final int newData = Math.abs(new Random().nextInt() % 100); Integer oldData = 0; try { Tool.println(&amp;#34;走你 → &amp;#34; + newData); oldData = exchanger.exchange(newData); Tool.println(&amp;#34;← 收到 &amp;#34; + oldData); } catch (InterruptedException e) { e.printStackTrace(); } ThreadUtil.sleep(newData * 10); if (newData &amp;lt; 30 || oldData &amp;lt; 30) { break; } } }; new Thread(runnable).</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Java-Concurrent/docs/java.util.concurrent/ExecutorCompletionService/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Java-Concurrent/docs/java.util.concurrent/ExecutorCompletionService/</guid>
      <description>ExecutorCompletionService ExecutorCompletionService 是一个获取异步任务结果的工具类。
封装了 Executor 和 BlockingQueue，把已经完成的任务放入队列，提供从队列中获取结果的方法 take / poll。
源码摘录 public class ExecutorCompletionService&amp;lt;V&amp;gt; implements CompletionService&amp;lt;V&amp;gt; { private final Executor executor; private final BlockingQueue&amp;lt;Future&amp;lt;V&amp;gt;&amp;gt; completionQueue; private class QueueingFuture extends FutureTask&amp;lt;Void&amp;gt; { private final Future&amp;lt;V&amp;gt; task; QueueingFuture(RunnableFuture&amp;lt;V&amp;gt; task) { super(task, null); this.task = task; } // ❤ FutureTask 执行完成后，会回调 Done 方法  protected void done() { // 加入队列  completionQueue.add(task); } } public Future&amp;lt;V&amp;gt; take() throws InterruptedException { return completionQueue.take(); } public Future&amp;lt;V&amp;gt; poll() { return completionQueue.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Java-Concurrent/docs/java.util.concurrent/ExecutorService/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Java-Concurrent/docs/java.util.concurrent/ExecutorService/</guid>
      <description>ExecutorService   java.util.concurrent.ExecutorService java.util.concurrent.ThreadPoolExecutor   继承关系 - Executor (java.util.concurrent) - ❤5❤ ExecutorService (java.util.concurrent) - AbstractExecutorService (java.util.concurrent) - ❤5❤ ThreadPoolExecutor (java.util.concurrent) - ❤5❤ ScheduledThreadPoolExecutor (java.util.concurrent) - ❤7❤ ForkJoinPool (java.util.concurrent) - ScheduledExecutorService (java.util.concurrent) - ScheduledThreadPoolExecutor (java.util.concurrent)  ThreadPoolExecutor ThreadPoolExecutor 的构造参数如下
/** * @param corePoolSize 最小线程数 * @param maximumPoolSize 最大线程数 * @param keepAliveTime corePoolSize 到 maximumPoolSize 线程的空闲时间，超过该时间会被释放 * @param unit 参数 keepAliveTime 的单位 * @param workQueue 在任务执行之前保存进该队列 * @param threadFactory 线程工厂，主要给线程器名字，❤ 默认：Executors.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Java-Concurrent/docs/java.util.concurrent/ForkJoin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Java-Concurrent/docs/java.util.concurrent/ForkJoin/</guid>
      <description>ForkJoin ForkJoin 是一个 基于分而治之算法， 把大任务分割成若干个小任务，最终汇总每个小任务结果后，得到大任务结果的框架。框架基于以下两种操作：
 fork 操作：把任务分成更小的任务，使用这个框架执行它们 join 操作：等待创建的任务的计算结束  与 Executor 的区别  Executor 是所有工作线程公用一个任务队列，所有的线程消费一个任务队列里面的任务 ForkJoin 是 每个线程都有一个任务对象，每个线程消费各自任务队列的任务   这样的话， ForkJoin 可能会导致一个问题，假如有些任务队列早早被消费完了，则该队列对应的线程就闲置了 Executor 则不会出现该问题，因为只有一个队列，当线程执行完一个任务后，重新从队列中获取任务，直到所有的任务执行换才会闲置   ForkJoin 为了解决任务队列消费速度不一致导致的闲置问题，当一个任务队列执行完之后，就去其他线程的队列里窃取一个任务来执行，还给这个行为起了一个高大上的名字：工作窃取（work-stealing）算法。JDK 1.8 可以简单的通过 ExecutorService executor = Executors.newWorkStealingPool(4) 获取改类型的 Executor 解决了线程闲置问题， Executor 和 ForkJoin 的线程都可达到满负荷运行了，这时候的区别在于两者对数据的竞争状态不一样  Executor 始终都是所有的线程竞争一个队列的数据 ForkJoin 只有在 “窃取” 其他线程任务队里的最后一条数据的时候才产生竞争   核心类  ForkJoinPool：它实现 ExecutorService 接口 和 work-stealing 算法，管理工作线程和提供关于任务的状态和执行的信息 ForkJoinTask： 它是是在 ForkJoinPool 中执行的任务的基类，提供在任务中执行 fork() 和 join() 操作的机制。通常， 为了实现你的 Fork/Join 任务，需要实现 ForkJoinTask 的子类  RecursiveAction 处理没有返回值的任务 RecursiveTask 处理有返回值的任务   编程流程 一个使用 ForkJoin 框架累加的示例</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Java-Concurrent/docs/java.util.concurrent/Future/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Java-Concurrent/docs/java.util.concurrent/Future/</guid>
      <description>Future  en java.util.concurrent.Future
zh java.util.concurrent.Future
 Future 接口 Future 接口是对异步行为的抽象，用来表示异步计算的结果，接口比较简单，如下：
public interface Future&amp;lt;V&amp;gt; { // 等待任务结束，获取结果  V get() throws InterruptedException, ExecutionException; // 获取结果，设置超时时间  V get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException; // 取消任务的执行  boolean cancel(boolean mayInterruptIfRunning); // 正常完成前取消，返回 true  boolean isCancelled(); // 任务正常终止、异常或取消，返回true  boolean isDone(); } 继承关系  Future (java.util.concurrent)  RunnableFuture (java.util.concurrent) extends Runnable  FutureTask (java.util.concurrent)  ForkJoinTask (java.util.concurrent) CompletableFuture (java.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Java-Concurrent/docs/java.util.concurrent/LinkedBlockingQueue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Java-Concurrent/docs/java.util.concurrent/LinkedBlockingQueue/</guid>
      <description> LinkedBlockingQueue  @see ArrayBlockingQueue
  LinkedBlockingQueue 是 BlockingQueue 的一个基于链表的实现 基于 ReentrantLock 的 await 和 signal 通知机制 实现阻塞，一个区别是  LinkedBlockingQueue 的增删操作分辨使用 两个锁，增删互不影响 ArrayBlockingQueue 使用一个锁，增删的时候有竞态条件  阻塞原理几乎与 ArrayBlockingQueue 一样，主要关注边界条件 入队和出队时的操作一个链表节点的增删，一个是读写下标的平移  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Java-Concurrent/docs/java.util.concurrent/locks/AbstractQueuedSynchronizer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Java-Concurrent/docs/java.util.concurrent/locks/AbstractQueuedSynchronizer/</guid>
      <description>AQS ~ AbstractQueuedSynchronizer  javadoc： java.util.concurrent.locks.AbstractQueuedSynchronizer
 AbstractQueuedSynchronizer 直译过来就是 抽象排队同步器，简称 AQS，可以把它认为是规定多线程访问共享资源的框架。
继承关系 从以下部分继承关系中可以看出，j.u.c 包下面的一些核心类，都继承自 AQS。
 AbstractQueuedSynchronizer extends AbstractOwnableSynchronizer  Sync in ReentrantLock (java.util.concurrent.locks) __ FairSync in ReentrantLock (java.util.concurrent.locks) __ NonfairSync in ReentrantLock (java.util.concurrent.locks) Sync in ReentrantReadWriteLock (java.util.concurrent.locks) Sync in CountDownLatch (java.util.concurrent) Sync in Semaphore (java.util.concurrent) Worker in ThreadPoolExecutor (java.util.concurrent)   队列 Node 结构 AQS 主要通过内置的 FIFO队列 来完成资源获取线程的排队工作。
static final class Node { // 共享模式  static final Node SHARED = new Node(); // 独占模式  static final Node EXCLUSIVE = null; /** 取消状态，该状态是最终状态，不会被改变， */ static final int CANCELLED = 1; // 后继节点 被 park 需要 unpark（被唤醒）  // 后继节点如果发现 前驱节点是 SIGNAL，park 自己  static final int SIGNAL = -1; /** 表名当前线程正在等待 condition，也就是在 condition 队列中 */ static final int CONDITION = -2; // SIGNAL 一般用来独占末实现，PROPAGATE 用在 共享模式下，该状态线程不会 park，可以获取到资源  static final int PROPAGATE = -3; /* 当前节点状态，默认是0.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Java-Concurrent/docs/java.util.concurrent/locks/LockSupport/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Java-Concurrent/docs/java.util.concurrent/locks/LockSupport/</guid>
      <description>LockSupport  zh java.util.concurrent.locks.LockSupport 官方文档的描述也很清楚
  LockSupport 是基于 sun.misc.Unsafe 封装的 线程阻塞工具类 主要提供 park 和 unpark ，即 阻塞 和 解除阻塞 两类功能 类似于 Object 的 wait 和 notify ，但是不需要获取 锁对象，也不会抛出中断异常 类似于 Thread 的 suspend 和 resume 过时方法，不会有产生死锁的副作用 park 和 unpark 可以理解为 操作线程的许可标示（true:许可 / false:不许可）  一个线程只有一个许可，默认是 false，调用 park 直接阻塞 假如先调动 unpark ，则线程的许可为 true，调用 park 直接返回，不阻塞 因为一个线程只有一个许可，调用多次 unpark 与1次的效果是一样 假如一开始没有 许可，调用 park 阻塞，需要调用 unpark 给予许可通行，解除阻塞 解除通行 park 通过后 许可又变为 禁止，下次 park 曾然阻塞   一些示例 // 假如先调动 unpark ，则线程的许可为 true，调用 park 直接返回，不阻塞 { LockSupport.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Java-Concurrent/docs/java.util.concurrent/locks/ReentrantLock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Java-Concurrent/docs/java.util.concurrent/locks/ReentrantLock/</guid>
      <description>ReentrantLock 实现原理 Sync // 加锁 和 释放的过程，都是都 对 state(重入次数) 的维护 abstract static class Sync extends AbstractQueuedSynchronizer { abstract void lock(); // 非公平锁的实现  final boolean nonfairTryAcquire(int acquires) { final Thread current = Thread.currentThread(); int c = getState(); //【抢占锁】 为 0 时说明没有线程持有锁，  if (c == 0) { // CAS 自旋竞争  if (compareAndSetState(0, acquires)) { // 成功后，独占线程设置为自己  setExclusiveOwnerThread(current); return true; } } // 【重入锁】不为 0 时判断独占线程是否自己， 是的话重入  else if (current == getExclusiveOwnerThread()) { // 重入次数 + 1  int nextc = c + acquires; if (nextc &amp;lt; 0) // overflow  throw new Error(&amp;#34;Maximum lock count exceeded&amp;#34;); setState(nextc); return true; } // 竞争失败，排队  return false; } protected final boolean tryRelease(int releases) { // 减少重入次数  int c = getState() - releases; if (Thread.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Java-Concurrent/docs/java.util.concurrent/locks/StampedLock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Java-Concurrent/docs/java.util.concurrent/locks/StampedLock/</guid>
      <description>StampedLock https://www.jianshu.com/p/4657ba18a0a0
https://www.liaoxuefeng.com/wiki/1252599548343744/1309138673991714
https://segmentfault.com/a/1190000015808032?utm_source=tag-newest
http://www.matools.com/file/manual/jdk_api_1.8_google/java/util/concurrent/locks/StampedLock.html</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Java-Concurrent/docs/java.util.concurrent/Phaser/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Java-Concurrent/docs/java.util.concurrent/Phaser/</guid>
      <description> Phaser </description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Java-Concurrent/docs/java.util.concurrent/PriorityBlockingQueue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Java-Concurrent/docs/java.util.concurrent/PriorityBlockingQueue/</guid>
      <description>PriorityBlockingQueue  PriorityBlockingQueue 是一个基于数组 的 无界 优先级队列 因为可以放无限的元素，所以会涉及到队列的扩容 队列元素有优先级基于 堆排序，优先级高的会放在前面 元素的优先级比较需要自定义 Comparator ，或者 元素自身是 Comparable 的，否则会抛出异常  java.lang.ClassCastException: xxx.xxx.Xxx cannot be cast to java.lang.Comparable   实现原理 put public void put(E e) { // 无界队列， put 不会 阻塞  offer(e); // never need to block } offer public boolean offer(E e) { if (e == null) throw new NullPointerException(); final ReentrantLock lock = this.lock; lock.lock(); int n, cap; Object[] array; // 元素个数 &amp;gt;= 现有队列的长度  while ((n = size) &amp;gt;= (cap = (array = queue).</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Java-Concurrent/docs/java.util.concurrent/Semaphore/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Java-Concurrent/docs/java.util.concurrent/Semaphore/</guid>
      <description>Semaphore Semaphore维护了一个 信号量许可集，通过 acquire 消耗信号量，release 增加信号量，如果 acquire 获取信号量的时候 信号量集合中没有，就 park 阻塞等到。
如何使用 int permits = 10; // 刚开始没有许可 Semaphore semaphore = new Semaphore(0); new Thread(() -&amp;gt; { for (int i = 0; i &amp;lt; permits; i++) { ThreadUtil.sleep(1, TimeUnit.SECONDS); // 偶数释放 1个，奇数释放 2个  semaphore.release(i % 2 + 1); } }).start(); for (int i = 0; i &amp;lt; permits; i++) { semaphore.acquire(); // 获取许可后执行  new Thread(() -&amp;gt; Tool.println(Thread.currentThread().getName() + &amp;#34;通过&amp;#34;)).</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Java-Concurrent/docs/java.util.concurrent/SynchronousQueue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Java-Concurrent/docs/java.util.concurrent/SynchronousQueue/</guid>
      <description>SynchronousQueue SynchronousQueue 是一个 没有长度 的阻塞队列，全程无锁，全部基于 CAS
每个插入操作必须等待另一个线程的对应移除操作，即 put 操作会阻塞，直到其他线程 take。适用场景：
 针对一个数据变化的通知 生产一个数据，消费一个数据 &amp;hellip;  如何使用 SynchronousQueue&amp;lt;Integer&amp;gt; sync = new SynchronousQueue&amp;lt;&amp;gt;(); final int[] someData = new int[1]; Consumer&amp;lt;Integer&amp;gt; changeIt = (newData) -&amp;gt; someData[0] = newData; Supplier&amp;lt;Integer&amp;gt; getChange = () -&amp;gt; someData[0]; //////////////////////////////// new Thread(() -&amp;gt; { for (; ; ) { final int newData = Math.abs(new Random().nextInt() % 100); changeIt.accept(newData); try { Tool.println(&amp;#34;我变了 &amp;#34; + newData); // 这里会 park，直到 sync.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Java-Concurrent/docs/sun.misc/Unsafe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Java-Concurrent/docs/sun.misc/Unsafe/</guid>
      <description>Unsafe Unsafe 是 Java 中可以直接操作内存的工具，属于 sun.* 包下的API。
 直接操作内存是很危险的一件事，不能通过Java虚拟机的垃圾回收机制进行内存释放，在使用的时候需要注意内存泄漏和溢出，并且Unsafe是一个平台相关的类，在实际开发中建议不要直接使用。
 获取 Unsafe 类实例 JDK 对这个类进行了限制，我们不能通过常规 new 的方式去获取该类的实例，也不能通过Unsafe.getUnsafe()获取
public final class Unsafe { private static final Unsafe theUnsafe; ... // 私有构造方法  private Unsafe() { } // 不是 系统 ClassLoader 会 抛出 SecurityException 异常  public static Unsafe getUnsafe() { Class var0 = Reflection.getCallerClass(); if (!VM.isSystemDomainLoader(var0.getClassLoader())) { throw new SecurityException(&amp;#34;Unsafe&amp;#34;); } else { return theUnsafe; } } static { ... // 但是静态代码块在 类加载后 会在内部实例化 自己  theUnsafe = new Unsafe(); .</description>
    </item>
    
  </channel>
</rss>